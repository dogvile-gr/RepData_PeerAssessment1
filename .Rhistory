order(h[,5])
klo <- order(h[,5])
klo
klo <- h[order(h[,5])]
g <- order(h$V5.x, decreasing=TRUE)
h[,g]
h[g]
h[g,]
jh <- h[g,]
View(jh)
sort1.hsb2 <- h[order(V5.x) , ]
sort1.hsb2 <- h[order(V5) , ]
View(h)
sort1.hsb2 <- gdp[order(V5) , ]
gdp = read.csv('getdata_data_GDP.csv',header=FALSE);
eds = read.csv('getdata_data_EDSTATS_Country.csv',header=FALSE);
View(gdp)
sort1.hsb2 <- gdp[order(gdp) , ]
View(sort1.hsb2)
sort1.hsb2 <- gdp[order(gdp$V4) , ]
View(sort1.hsb2)
sort1.hsb2 <- gdp[order(gdp$V5) , ]
View(sort1.hsb2)
View(h)
sort1.hsb2 <- h[order(h$V5) , ]
sort1.hsb2 <- h[order(h$V5.x) , ]
View(sort1.hsb2)
View(gdp)
sort1.hsb2 <- gdp[order(gdp$V2) , ]
View(sort1.hsb2)
View(eds)
View(gdp)
View(df)
View(eds)
h <- merge(gdp, eds, by.x = c("V1"), by.y = c("V1"),all=FALSE)
View(h)
hol <- h[order(h,)]
hol <- h[order(h,na.last = NA)]
hol <- h[order(h.V5.x,na.last = NA)]
R> h[ order(-h[,5] ]
R> h[ order(-h[,5]) ]
R <-  h[ order(-h[,5]) ]
df <- h[order(h$V5.x),]
View(df)
library(plyr)
b <- arrange(h,V5.x)
View(b)
b <- arrange(h,desc(V5.x)
)
View(b)
b <- arrange(h,desc(V4.x))
View(b)
b <- arrange(h,desc(V6.x))
View(b)
gdp = read.csv('getdata_data_GDP.csv',header=FALSE);
View(gdp)
gdp = read.csv('getdata_data_GDP.csv',header=FALSE);
gdp = read.csv('getdata_data_GDP.csv',header=FALSE);
View(gdp)
b <- arrange(h,desc(V5.x))
View(b)
b <- arrange(h,V5.x)
View(b)
gdp = read.csv('getdata_data_GDP.csv',header=FALSE,stringsAsFactors = FALSE);
eds = read.csv('getdata_data_EDSTATS_Country.csv',header=FALSE);
b <- merge(gdp,eds, by=c("V1","V1"))
View(b)
df <- is.numeric(h$V5.x)
is.numeric(h$V5.x)
sapply(h[, 5], as.numeric)
sapply(h[, 5], as.numeric)
h(sapply(h[, 5], as.numeric))
h[sapply(h[, 5], as.numeric)]
h[sapply(h[, 5], as.numeric),]
View(h)
is.numeric(h$V5.x)
is.string(h$V5.x)
is.character(h$V5.x)
sapply(h, class)
View(h)
h[V3.y==High income:nonOECD]
h[V3.y=="High income:nonOECD"]
h[h$V3.y=="High income:nonOECD"]
h$V3.y=="High income:nonOECD"
h$V3.y=="High income: nonOECD"
h[h$V3.y=="High income: nonOECD"]
h[,h$V3.y=="High income: nonOECD"]
test <- mean(subset(h, h$V3.y=="High income: nonOECD"))
test <- mean(subset(h, h$V3.y==High income: nonOECD))
test <- mean(subset(h, h$V3.y=='High income: nonOECD))
test <- mean(subset(h, h$V3.y=='High income: nonOECD'))
test <- subset(h, h$V3.y=='High income: nonOECD')
View(test)
mean(test$V5.x)
mean(test$V5.x,na.rm=FALSE)
hf <- mean(test$V5.x, na.rm = FALSE)
write.table(test, file = "test.csv",row.name=FALSE)
test2 <- subset(h, h$V3.y=='High income: OECD')
h[,h$V3.y=="High income: OECD"]
h <- merge(gdp, eds, by.x = c("V1"), by.y = c("V1"),all=FALSE)
h[,h$V3.y=="High income: OECD"]
View(h)
h[,h$V3.y=="High income:OECD"]
h[,h$V3.y=="High income: OECD"]
View(h)
test2 <- subset(h, h$V3.y=='High income: OECD')
View(test2)
write.table(test2, file = "test.csv",row.name=FALSE)
write.table(test2, file = "test2.csv",row.name=FALSE)
install.packages("swirl")
library("swirl")
rm(list=ls())
library("swirl")
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran_to_print
tbl_df
cran
?select
select(cran, ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
select(cran, -5:20)
(-5:20)
-(5:20)
select(cran, -5:10)
select(cran,-(1:10))
select(cran,-(x:size))
-(1:20)
select(cran, -(time,10))
select(cran, -(x,10))
select(cran, -(1,10))
info()
select(cran, -0:10)
select(cran, -size)
select(cran, -(X,size))
select(cran, -1:3)
select(cran, -1:2)
select(cran, -1:4)
select(cran, -0:3)
(-0:3)
-(0:3)
select(cran, -(,0:3)
select(cran, -(,0:3))
select(cran, -(0:3))
select(cran, -(0:4))
select(cran, r_arch:country)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == 'US')
?Comparison
filter(cran, r_version == "3.0.2", country == "US")
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == 'IN')
filter(cran, country == "US" | country == "IN")
filter()
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<- select(cran, size:ip_id)
arrange(cran2, ip_id) #variable ip_id will be arranged in an ascending order
arrange(cran2, desc(ip_id)) #desc() stands for 'descending'
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3<-select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
?tbl_df()
cran <- tbl-df(mydf)
cran <- tbl-df('mydf)
""
''
cv
d
213
)
)
]
]
}
cran %>%
select(ip_id, country, package, size) %>%
omnitest('mutate(cran3, size_mb = size / 2^20)')
swirl
swirl()
library(dply)
library(dplyr)
swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate()
cran %>%
select(ip_id, country, package, size) %>%
mutate()
submit()
reset()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
gather(students)
?gather
gather(grade,sex)
gather(students,grade,sex)
gather(students,sex)
gather(students,sex,count)
gather(students,sex,count,-grade)
students2
gather(students2,sex_class,count,-grade)
res <- gather(students2,sex_class,count,-grade)
res
?separate
data = res, col = sex_class, into = c("sex", "class")
data = separate(res, col = sex_class, into = c("sex", "class"))
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
sread()
spread()
spread
spread()
spread
?spread
submit()
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
submit()
submit()
submit()
submit()
student4
students4
submit()
submit()
submit()
passed
failed
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
rbind_list(passed, failed)
sat
submit()
submit()
submit()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
library(ggplot2)
g <- ggplot2(movies, aes(votes, rating))
?lpoints
?xyplot()
?splom()
?trellis.par.set()
?text()
?summmary
()
}
?summary
?summary()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
b1 <- cor(x,y)*sd(y)/sd(x)
b0 <- mean(y) - b1 * mean(x)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
rm(list = ls())
setwd("~/GitHub/RepData_PeerAssessment1")
## ----loaddata------------------------------------------------------------
unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
## ------------------------------------------------------------------------
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
## ------------------------------------------------------------------------
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps,ymax=max(averages$steps))) +
geom_line(colour="coral1", size=1.0) +
xlab("5-minute interval") +
geom_segment( mapping=aes(x=835,y=207.1698, xend=849, yend=217),size=2, color="blue") +
geom_text(label="f",colour = "red",x=835,y=207.1698,
yend=200,xend=800)+
geom_point(mapping=aes(x=835, y=207.1698), size=3, shape=21, fill="white") +
ylab("average number of steps taken")
##
## ------------------------------------------------------------------------
averages[which.max(averages$steps),]
## ----how_many_missing----------------------------------------------------
all.na <- sum(is.na(data$steps))
library("dplyr")
Filled <- data
input <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (average[averages$interval == interval, "steps"])
return(filled)
}
Filled$steps <- mapply(input, Filled$steps, Filled$interval)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps)
median(total.steps)
weekday.or.weekend <- function(date) {
day <- weekdays(date)
if (day %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"))
return("weekday")
else if (day %in% c("Saturday", "Sunday"))
return("weekend")
else
stop("invalid date")
}
filled.data$date <- as.Date(filled.data$date)
filled.data$day <- sapply(filled.data$date, FUN=weekday.or.weekend)
## ------------------------------------------------------------------------
averages <- aggregate(steps ~ interval + day, data=filled.data, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(day ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean1(total.steps, na.rm=TRUE)
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
mean(total.steps)
median(total.steps)
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
#mean and median total number of steps taken per day
mean(total.steps)
median(total.steps)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean(total.steps, na.rm=TRUE)
median(total.steps, na.rm=TRUE)
unzip(zipfile="repdata_data_activity.zip")
data <- read.csv("activity.csv")
## ------------------------------------------------------------------------
library(ggplot2)
total.steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
mean_withNA <- mean(total.steps, na.rm=TRUE)
median_withNA <- median(total.steps, na.rm=TRUE)
data_sum<-summarise(group_by(data,date),sum(steps,na.rm=TRUE))
qplot(data_sum, binwidth=1000, xlab="total number of steps taken each day")
mean_withNA <- mean(data_sum, na.rm=TRUE)
data_sum<- summarise(group_by(data,date),sum(steps,na.rm=TRUE))
mean_withNA <- mean(data_sum, na.rm=TRUE)
spd <- ddply(data, .(date), summarize, steps = sum(steps))
library(dplyr)
spd <- ddply(data, .(date), summarize, steps = sum(steps))
spd <- daply(data, .(date), summarize, steps = sum(steps))
library(plyr)
spd <- ddply(data, .(date), summarize, steps = sum(steps))
data_sum <- ddply(data, .(date), summarize, steps = sum(steps))
mean_withNA <- mean(data_sum, na.rm=TRUE)
median_withNA <- median(data_sum, na.rm=TRUE)
View(data_sum)
temp = aggregate(x=list(total_steps=data$steps),by=list(Date=data$date),FUN=sum,na.rm=T)
View(temp)
temp = aggregate(x=list(steps=data$steps),by=list(Date=data$date),FUN=sum,na.rm=T)
data.sum = aggregate(x=list(steps=data$steps),by=list(Date=data$date),FUN=sum,na.rm=T)
mean_withNA <- mean(data_sum, na.rm=TRUE)
mean_withNA <- mean(data_sum$steps, na.rm=TRUE)
median_withNA <- median(data_sum$steps, na.rm=TRUE)
qplot(data_sum, binwidth=1000, xlab="total number of steps taken each day")
qplot(data.sum$steps, xlab = "total number of steps taken each day",binwidth = 1000)
mean_withNA <- mean(data_sum$steps, na.rm=TRUE)
median_withNA <- median(data_sum$steps, na.rm=TRUE)
library(ggplot2)
averages <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval),
FUN=mean, na.rm=TRUE)
ggplot(data=averages, aes(x=interval, y=steps,ymax=max(averages$steps))) +
geom_line(colour="coral1", size=1.0) +
xlab("5-minute interval") +
geom_segment( mapping=aes(x=835,y=207.1698, xend=849, yend=217),size=2, color="blue") +
geom_text(label="f",colour = "red",x=835,y=207.1698,
yend=200,xend=800)+
geom_point(mapping=aes(x=835, y=207.1698), size=3, shape=21, fill="white") +
ylab("average number of steps taken")
##
## ------------------------------------------------------------------------
averages[which.max(averages$steps),]
## ----how_many_missing----------------------------------------------------
all.na <- sum(is.na(data$steps))
## ------------------------------------------------------------------------
# Replacing each missing value with the mean value of its 5-minute interval
fill.value <- function(steps, interval) {
filled <- NA
if (!is.na(steps))
filled <- c(steps)
else
filled <- (averages[averages$interval==interval, "steps"])
return(filled)
}
##  new dataset with filled data of missing values
filled.data <- data
filled.data$steps <- mapply(fill.value, filled.data$steps, filled.data$interval)
## ------------------------------------------------------------------------
#A histogram of the total number of steps taken each day
total.steps <- tapply(filled.data$steps, filled.data$date, FUN=sum)
qplot(total.steps, binwidth=1000, xlab="total number of steps taken each day")
#mean and median total number of steps taken per day
mean(total.steps)
median(total.steps)
mean_noNA <- mean(total.steps)
median_noNA <- median(total.steps)
mean_withNA <- mean(data_sum$steps, na.rm=TRUE)
median_withNA <- median(data_sum$steps, na.rm=TRUE)
mean_noNA <- mean(total.steps)
median_noNA <- median(total.steps)
mean_withNA <- mean(data.sum$steps, na.rm=TRUE)
median_withNA <- median(data.sum$steps, na.rm=TRUE)
